name: 'Leviathan Run'
description: 'Test your software directly on hardware using the Levaithan Testing framework'
inputs:
  LEVIATHAN_REF:  # id of input
    description: "Leviathan branch, or tag, or commit to test with. Examples: 'refs/heads/<branchName>', 'refs/tags/<tagName>', '<commitId>'"
    required: false
    default: 'refs/heads/master'
  # CONFIG:
  #   description: 'path to config.js'
  #   required: false
  #   default: './suites/config.js'
  SUITES:
    description: 'path to test folders'
    required: false
    default: './suites'
  TEST_SUITE_NAME:
    description: 'which test suite to run'
    required: true
  WORKSPACE:
    description: 'path to WORKSPACE'
    required: false
    default: './.leviathan-inputs'
  DEVICE_TYPE:
    description: "slug of device type"
    required: true
  REPORTS:
    description: "path to reports directory"
    required: false
    default: "./reports"
  ENVIRONMENT:
    description: "What BalenaCloud env, balena-cloud or balena-machine"
    required: true
    default: "balena-cloud"
  BALENACLOUD_ORG:
    required: false
    description: "Organization used during cloud suite to create fleets, etc."
    default: "testbot"
  BALENACLOUD_API_KEY:
    required: false
  BALENAMACHINE_API_KEY:
    required: false
  BALENACLOUD_APP_NAME:
    description: "Testbot fleet for finding available Leviathan workers. Not used for QEMU workers. Can accept a list of apps separated by commas."
    required: false
    default: "balena/testbot-rig"
  BALENACLOUD_API_URL:
    required: false
    default: "balena-cloud.com"
  BALENAMACHINE_API_URL:
    required: false
    default: "bm.balena-dev.com"
  BALENACLOUD_SSH_URL:
    required: false
    default: "ssh.devices.bm.balena-dev.com"
  BALENACLOUD_SSH_PORT:
    default: 222
    required: false
  QEMU_CPUS:
    required: false
    default: 4
  QEMU_MEMORY:
    required: false
    default: "1G"
  WORKER_TYPE:
    description: "Valid choices: testbot/qemu"
    required: true
  LEVIATHAN_DEBUG:
    description: |
      Use this parameter to modify the default debugging settings on test runs. To debug test runs when rebuilding, add new values to this parameter separated with commas. Know more about the possible values available for debugging: https://balena-os.github.io/leviathan/pages/Getting-Started/debugging.html Example value: dev: true, failFast: false
    required: false


outputs:
  reports:
    description: "REPORT!"
    value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  
  env:
    TEST_SUITE_NAME: ${{ inputs.TEST_SUITE_NAME }}
    SUITES: ${{ inputs.SUITES }}
    REPORTS: ${{ inputs.REPORTS }}
    WORKSPACE: ${{ inputs.WORKSPACE }}
    BALENACLOUD_ORG: ${{ inputs.WORKSPACE }}
    BALENACLOUD_API_KEY: ${{ secrets.BALENA_TOKEN }}
    BALENACLOUD_APP_NAME: balena/testbot-rig
    BALENACLOUD_API_URL: balena-cloud.com
    ENVIRONMENT: ${{ matrix.ENVIRONMENT }}
    BALENAMACHINE_API_KEY: ${{ secrets.BALENAMACHINE_API_KEY }}
    BALENAMACHINE_API_URL: bm.balena-dev.com
    BALENACLOUD_SSH_URL: ssh.devices.bm.balena-dev.com
    BALENACLOUD_SSH_PORT: 222
    QEMU_CPUS: 1
    QEMU_MEMORY: 1G
    WORKER_TYPE: ${{ matrix.WORKER_TYPE }}
    DEVICE_TYPE: ${{ matrix.DEVICE_TYPE }}

  steps:
    - name: Past Cleanup probably not required
      shell: bash
      run: |
        docker system prune -a -f || true
        printenv

    - name: Checkout the current repo
      uses: actions/checkout@v4

    - name: Fetching the right leviathan
      shell: bash
      env:
        LEVIATHAN_REF: ${{ inputs.LEVIATHAN_REF }}
      run: |
        git clone --recursive https://github.com/balena-os/leviathan
        cd leviathan/
        git fetch origin
        git checkout $LEVIATHAN_REF

        if ! grep github.com ~/.ssh/known_hosts > /dev/null
        then
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
        fi

        git clone git@github.com:balena-io/private-contracts.git core/private-contracts
        


    - name: All the copying stage
      shell: bash
      run: |
        pwd
        mkdir -p ${{ inputs.WORKSPACE }}
        (cd ${{ inputs.WORKSPACE }} && mkdir -p ${{ inputs.REPORTS }})
        cp -r ../${{ inputs.SUITES }} ${{ inputs.WORKSPACE }}
        cp ../${{ inputs.SUITES }}/config.js ${{ inputs.WORKSPACE }}
        ls ${{ inputs.WORKSPACE }}

    # Should be done by the user
    # - name: Setting variables stage
    #   shell: bash
    #   env:
    #     DEVICE_TYPE: ${{ inputs.device_type }}
    #     ENVIRONMENT: ${{ env.environment }}
    #   run: |
    #     isPrivate=$(ls "core/private-contracts/contracts/hw.device-type" | grep "${DEVICE_TYPE}") || true

    #     if [ "$isPrivate" = "${DEVICE_TYPE}" ]; then
    #       echo "${DEVICE_TYPE} is a private device type, using balena-cloud"
    #       echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     else
    #       echo "${DEVICE_TYPE} is a public device type, using balena-machine"
    #     fi

    #     # TEMPORARY WORKAROUND - UNIPI4 device type is in balena cloud, despite being public
    #     #if [ "${DEVICE_TYPE}" = "raspberrypi4-unipi-neuron" ]; then
    #     #echo "raspberrypi4-unipi-neuron device type, using balena-cloud"
    #     #    echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     #fi

    #     # TEMPORARY WORKAROUND - raspberrypi5 device type is in balena cloud, despite being public
    #     #if [ "${DEVICE_TYPE}" = "raspberrypi5" ]; then
    #     #echo "raspberrypi5 device type, using balena-cloud"
    #     #    echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     #fi

    #     # TEMPORARY WORKAROUND - imx8mp-var-dart device type is in balena cloud, despite being public
    #     if [ "${DEVICE_TYPE}" = "imx8mp-var-dart" ]; then
    #       echo "imx8mp-var-dart device type, using balena-cloud"
    #         echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     fi

    #     # TEMPORARY WORKAROUND - kontron-imx8mm device type is in balena cloud, despite being public
    #     if [ "${DEVICE_TYPE}" = "kontron-mx8mm" ]; then
    #       echo "kontron-mx8mm device type, using balena-cloud"
    #         echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     fi

    #     # TEMPORARY WORKAROUND - imx8mm-lpddr4-evk device type is in balena cloud, despite being public
    #     if [ "${DEVICE_TYPE}" = "imx8mm-lpddr4-evk" ]; then
    #       echo "imx8mm-lpddr4-evk device type, using balena-cloud"
    #         echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     fi

    #     # TEMPORARY WORKAROUND - phyboard-lyra-am62xx-2 device type is in balena cloud, despite being public
    #     if [ "${DEVICE_TYPE}" = "phyboard-lyra-am62xx-2" ]; then
    #       echo "phyboard-lyra-am62xx-2 device type, using balena-cloud"
    #         echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     fi

    #     # TEMPORARY WORKAROUND - revpi-connect-4 device type is in balena cloud, despite being public
    #     if [ "${DEVICE_TYPE}" = "revpi-connect-4" ]; then
    #       echo "revpi-connect-4 device type, using balena-cloud"
    #         echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     fi

    #     # TEMPORARY WORKAROUND - beaglebone-play device type is in balena cloud, despite being public
    #     if [ "${DEVICE_TYPE}" = "beaglebone-play" ]; then
    #       echo "beaglebone-play device type, using balena-cloud"
    #         echo "ENVIRONMENT='balena-cloud'" >> $GITHUB_ENV
    #     fi


    # - name: Set BCloud env variables
    #   shell: bash
    #   run: |
    #     ls .leviathan-inputs
    #     cat .leviathan-inputs/config.js

    - name: Show the final config.js before RUN
      run: |
        cat .leviathan-inputs/config.js
      shell: bash

    - name: generate a unique subnet for this job
      run: make subnet || true
      shell: bash

    - name: Build leviathan images
      shell: bash
      run: make build

    - name: Run test suite
      shell: bash
      run: |
        make config
        make test || exit 1

    - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
      with:
        name: reports-${{ env.WORKER_TYPE }}-${{ env.DEVICE_TYPE }}
        path: ${{ input.reports }}

    - name: Please tear down
      shell: bash
      run: make down







# When should I use env.something or inputs.something. For the user, should we do inputs or env?
# AFTER MVP Add a way to swap leviathan debug for one of runs


# if [ ! -z "$LEVIATHAN_DEBUG" ]
# then
#   perl -i~ -0777 -pe "s/debug: ({|\[)[^}\]]+(}|\])/debug: {$LEVIATHAN_DEBUG/g" .leviathan-inputs/config.js
# fi

#  Why even this exists? Find out

# if [ ! -z "$LEVIATHAN_NETWORK_WIRED" = true ]
# then
#   perl -i~ -0777 -pe "s/networkWired: [^,]+,/networkWired: true,/g" .leviathan-inputs/config.js
#   perl -i~ -0777 -pe "s/networkWireless: [^,]+,/networkWireless: false,/g" .leviathan-inputs/config.js
# fi


## Feature: Override configs on workflow dispatch


# if [ ! -z "$USE_ME_TO_OVERRIDE_CONFIG" ]
# then
#   # Overrite the config entirely
#   echo "$USE_ME_TO_OVERRIDE_CONFIG" > .leviathan-inputs/config.js
#     echo "******** OVERRIDING THE CONFIG - config.js as follows *************"
#     cat .leviathan-inputs/config.js
# fi

## Test for multiple fleets, envs, and devices
