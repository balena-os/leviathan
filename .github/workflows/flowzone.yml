name: Flowzone

on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [main, master]
  # allow external contributions to use secrets within trusted code
  pull_request_target:
    types: [opened, synchronize, closed]
    branches: [main, master]

jobs:
  flowzone:
    name: Flowzone
    uses: product-os/flowzone/.github/workflows/flowzone.yml@master
    # prevent duplicate workflows and only allow one `pull_request` or `pull_request_target` for
    # internal or external contributions respectively
    if: |
      (github.event.pull_request.head.repo.full_name == github.repository && github.event_name == 'pull_request') ||
      (github.event.pull_request.head.repo.full_name != github.repository && github.event_name == 'pull_request_target')
    secrets: inherit

  e2e:
    needs: [flowzone]
    if: |
      ((github.event.pull_request.head.repo.full_name == github.repository && github.event_name == 'pull_request') ||
      (github.event.pull_request.head.repo.full_name != github.repository && github.event_name == 'pull_request_target')) &&
      github.event.action != 'closed'
    runs-on: actuated-8cpu-8gb

    env:
      SUITES: ./suites
      REPORTS: ./reports
      WORKSPACE: ./workspace
      BALENACLOUD_ORG: testbot
      BALENACLOUD_API_KEY: ${{ secrets.BALENA_TOKEN }}
      BALENACLOUD_APP_NAME: balena/testbot-rig
      BALENACLOUD_API_URL: balena-cloud.com
      ENVIRONMENT: ${{ matrix.ENVIRONMENT }}
      BALENAMACHINE_API_KEY: ${{ secrets.BALENAMACHINE_API_KEY }}
      BALENAMACHINE_API_URL: bm.balena-dev.com
      BALENACLOUD_SSH_URL: ssh.devices.bm.balena-dev.com
      BALENACLOUD_SSH_PORT: 222
      QEMU_CPUS: 4
      QEMU_MEMORY: 1G
      WORKER_TYPE: ${{ matrix.WORKER_TYPE }}
      DEVICE_TYPE: ${{ matrix.DEVICE_TYPE }}

    defaults:
      run:
        working-directory: .
        shell: bash --noprofile --norc -eo pipefail -x {0}

    strategy:
      fail-fast: false
      matrix:
        include:
          # ONLY TESTING this image that's why commented the rest
          - DEVICE_TYPE: genericx86-64-ext
            WORKER_TYPE: qemu
            ENVIRONMENT: balena-cloud
          # - DEVICE_TYPE: generic-amd64
          #   WORKER_TYPE: qemu
          #   ENVIRONMENT: balena-cloud
          # - DEVICE_TYPE: generic-aarch64
          #   WORKER_TYPE: qemu
          #   ENVIRONMENT: balena-machine
          # - DEVICE_TYPE: raspberrypi3
          #   WORKER_TYPE: testbot
          #   ENVIRONMENT: balena-machine

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          submodules: true
      
      # - name: Download Jenkins balena-image.docker
      #   run: |
      #     curl -C - --fail --connect-timeout 1060 --keepalive-time 1060 -H 'accept-encoding: gzip, deflate' -O --output-dir ${{ env.WORKSPACE }} ${{ env.JENKINS_URL }}
      
      - name: Download Jenkins balena-image.docker
        run: |
          pip install gdown
          # amd64 gdown 1vfMcxjDz-htX0lEiSqgk0SzVIKu5Nep2  
          gdown 1U95Z6JGH885FzS6yOFxRvb9B7fIeFRar  
          ls -al .
          
      - name: Copy suite config
        run: |
          mv balena-image.docker ${{ env.WORKSPACE }}
          ls -al ${{ env.WORKSPACE }}
          cp -a ${{ env.SUITES }}/config.js ${{ env.WORKSPACE }}/config.js

      - name: Build leviathan images
        run: |
          make build

      - name: Run test suite
        run: |
          make config
          make test || exit 1

      - uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4
        with:
          name: reports-${{ env.WORKER_TYPE }}-${{ env.DEVICE_TYPE }}
          path: ${{ env.REPORTS }}
